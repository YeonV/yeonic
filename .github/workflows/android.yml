name: Build App
run-name: Creating Production Ready Android App ðŸš€
on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Create Release'
        default: 'No'
        required: false
        type: choice
        options:
          - 'Yes'
          - 'No'

  push:
    branches:
      - main

jobs:
  prepare:
    name: Build APK
    if: startsWith(github.event.head_commit.message, 'Release') || startsWith(github.event.head_commit.message, 'Build')
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.package-version.outputs.current-version }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          repository: YeonV/yeonic
          ref: main
          fetch-depth: 0

      - name: Get commit-messages
        if: startsWith(github.event.head_commit.message, 'Release') || github.event.inputs.release == 'Yes'
        continue-on-error: true
        id: get_messages
        run: |
          git log --pretty=format:"+ %s [\![by](https://img.shields.io/badge/by-$(echo '%an' | sed 's/ /_/g')-blue.svg?logo=github&logoColor=white)](https://github.com/YeonV/yeonic/commit/%h)" $(git describe --tags --abbrev=0 @^)..@ | grep -v -E '(cleanup|Update)' | awk '{ sub(/\[\[!\]\]/, ""); msg = substr($0, 1, index($0, "[!") - 1); if (length(msg) >= 5 && !seen[msg]++) { print $0 } }' | awk '{ while (match($0, /https:\/\/img\.shields\.io\/badge\/by-[^"]*-blue\.svg\?logo=github&logoColor=white/)) { url = substr($0, RSTART, RLENGTH); gsub(" ", "_", url); printf "%s%s", substr($0, 1, RSTART - 1), url; $0 = substr($0, RSTART + RLENGTH) } gsub(" ", "_", $0); print }' >> /tmp/messages.txt
          cp /tmp/messages.txt .messages.md
          cat /tmp/messages.txt
          echo 'MESSAGES<<EOF' >> $GITHUB_ENV
          printf '%b\n' "$(cat /tmp/messages.txt)" >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master

      - name: Create Release
        if: startsWith(github.event.head_commit.message, 'Release') || github.event.inputs.release == 'Yes'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.package-version.outputs.current-version }}
          release_name: Release ${{ steps.package-version.outputs.current-version }}
          body: |
            ${{ env.MESSAGES || 'New Relase' }}
          draft: false
          prerelease: false

  buildapk:
    name: Build APK
    needs: prepare
    if: startsWith(github.event.head_commit.message, 'Release') || startsWith(github.event.head_commit.message, 'Build')
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          repository: YeonV/yeonic
          ref: main

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: install dependencies
        run: npm ci

      - name: Create Build Folder
        run: npm run build

      - name: Add android folder if not present
        run: if [ ! -d "./android" ]; then npx cap add android; fi

      - name: Capacitor update
        run: npx cap update

      - name: Capacitor sync
        run: npx cap sync

      - name: Generate icons and splash screen to android folder
        run: if [ -d "./resources" ]; then npm install @capacitor/assets --save-dev && npx capacitor-assets generate --android; fi

      - name: Set Version
        run: npx capacitor-set-version . -v ${{ needs.prepare.outputs.version }} -b ${{ github.run_number }} --json

      - name: Build app bundle
        run: cd android && ./gradlew bundle && ./gradlew assembleDebug

      - name: Extract Android signing key from env
        run: |
          echo "${{ secrets.RELEASE_KEYSTORE }}" > android/release.jks.base64
          base64 -d android/release.jks.base64 > android/release.decrypted.jks

      - name: Sign dev build
        run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab blade

      - name: Check folder content of android output
        run: ls ./android/app/build/outputs/bundle/release

      - name: Upload release bundle
        if: (startsWith(github.event.head_commit.message, 'Release') != true) || github.event.inputs.release == 'No'
        uses: actions/upload-artifact@v3
        with:
          name: yeonic-${{ needs.prepare.outputs.version }}
          path: ./android/app/build/outputs/bundle/release/app-release-signed.aab
          retention-days: 60

      - name: Upload debug bundle
        if: (startsWith(github.event.head_commit.message, 'Release') != true) || github.event.inputs.release == 'No'
        uses: actions/upload-artifact@v3
        with:
          name: yeonic-${{ needs.prepare.outputs.version }}-debug
          path: ./android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 60

      - name: Upload Android-APK to Release
        if: startsWith(github.event.head_commit.message, 'Release') || github.event.inputs.release == 'Yes'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./android/app/build/outputs/apk/debug/app-debug.apk
          asset_name: yeonic-${{ needs.prepare.outputs.version }}--android.apk
          asset_content_type: application/vnd.android.package-archive

  builddesktop:
    name: Build Desktop
    needs: prepare
    continue-on-error: true
    if: startsWith(github.event.head_commit.message, 'Release') || startsWith(github.event.head_commit.message, 'Build')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-14]
        include:
          - os: ubuntu-latest
            postfix: arm64
          - os: windows-latest
            postfix: win-setup.exe
          - os: macos-latest
            postfix: osx-x64.dmg
          - os: macos-14
            postfix: osx-arm64.dmg
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: install dependencies
        run: npm ci

      - name: Create Build Folder
        run: npm run build

      - name: Build electron app
        run: |
          npx --yes cap sync @capacitor-community/electron
          cd electron
          npm i
          npx --yes electron-builder build -c ./electron-builder.config.json

      - name: Upload Binary to Release
        if: startsWith(github.event.head_commit.message, 'Release') || github.event.inputs.release == 'Yes'
        uses: YeonV/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ./electron/dist/yeonic-${{ needs.prepare.outputs.version }}-${{ matrix.postfix }}
          asset_name: yeonic-${{ needs.prepare.outputs.version }}-${{ matrix.postfix }}
          asset_content_type: application/octet-stream

      - name: Upload Binary to Workflow
        if: startsWith(github.event.head_commit.message, 'Release') != true && github.event.inputs.release == 'No'
        uses: actions/upload-artifact@v3
        with:
          name: yeonic-${{ needs.prepare.outputs.version }}-arm64
          path: ./electron/dist/yeonic-${{ needs.prepare.outputs.version }}-${{ matrix.postfix }}
          retention-days: 60
